//#region 
import * as readlinePromises from 'node:readline/promises';
const rl = readlinePromises.createInterface({ input: process.stdin, output: process.stdout });
//#endregion

import { print } from './lib/output.mjs';
import { ANSI } from './lib/ansi.mjs';
import { getRandomItemFromArray } from './lib/random.mjs';
import GAME_DICTIONARY from './dictionary.mjs';

const CHOICES = { rock: 1, paper: 2, scissors: 3 };
const LIST_OF_CHOICES = [CHOICES.rock, CHOICES.paper, CHOICES.scissors];


print(GAME_DICTIONARY.playGame);
let gameIsRunning = true;
while(gameIsRunning == true){

async function getLanguageChoice(){
    print("Choose your language (en/no):");
    const lang =(await rl.question("")).trim();
    if (GAME_DICTIONARY[lang]){
        language = lang;

    }

}

print(ANSI.CLEAR_SCREEN);
print(GAME_DICTIONARY.title, ANSI.COLOR.RED);

let player = await askForPlayerChoice();
let npc = makeAIChoice();

print(`${GAME_DICTIONARY.youPicked} ${getDesc(player)} ${GAME_DICTIONARY.aiPicked} ${getDesc(npc)}`);
print(GAME_DICTIONARY.winner + evaluateWinner(player, npc));


print(GAME_DICTIONARY.playAgain);
        let replayAnswer = await rl.question("");


if(replyAnswer =="N"){ 
gameIsRunning = false 

}

}

// ---- Game functions etc..

function evaluateWinner(p1Ch, p2Ch) {
    // Vi går ut i fra at spiller 2 vinner :)
    let result = GAME_DICTIONARY.player2;

    // Men vi må sjekke om noe annet skjedde.
    if (p1Ch == p2Ch) {
        result = GAME_DICTIONARY.draw;
    } else if (p1Ch == CHOICES.rock) {
        if (p2Ch == CHOICES.scissors) {
            result = GAME_DICTIONARY.player1;
        }
    } else if (p1Ch == CHOICES.paper) {
        if (p2Ch == CHOICES.rock) {
            result = GAME_DICTIONARY.player1;
        }
    } else if (p1Ch == CHOICES.scissors) {
        if (p2Ch == CHOICES.paper) {
            result = GAME_DICTIONARY.player1;
        }
    }

    return result;
}

function makeAIChoice() {
    return getRandomItemFromArray(LIST_OF_CHOICES);
}

function getDesc(choice) {
    return GAME_DICTIONARY.choices[choice - 1]
}

async function askForPlayerChoice() {

    let choice = null;

    do {
        print(GAME_DICTIONARY.selectionQuestion);
        let rawChocie = await rl.question("");
        rawChocie = rawChocie.toUpperCase();
        choice = evaluatePlayerChoice(rawChocie);
    } while (choice == null)

    return choice;
}

function evaluatePlayerChoice(rawChocie) {
    let choice = null;

    if (rawChocie == GAME_DICTIONARY.rock) {
        choice = CHOICES.rock;
    } else if (rawChocie == GAME_DICTIONARY.paper) {
        choice = CHOICES.paper;
    } else if (rawChocie == GAME_DICTIONARY.scissors) {
        choice = CHOICES.scissors;
    }
    return choice;
}




process.exit();

const GAME_DICTIONARY = {

    no: { 
    player1: "du",
    player2: "AI overloard",
    draw: "Det ble uavgjort",
    winner: "Vinneren er : ",
    selectionQuestion: "Gjør valget ditt (S)tein, S(a)ks,(P)apir",
    youPicked: "Du valgte",
    aiPicked: "AI valgte",
    rock: "S",
    paper: "P",
    scissors: "A",
    choices: ["Stein", "Papir", "Saks"],
    title: "La oss spille stein saks papir",
    playAgain: "La oss spille igjen!Y/N"
},

en: {
    player1:"you",
    player2:"AI overleard",
    draw: "Its a draw!",
    winner: "The winner is",
    selectionQuestion: "Make your Choice (R)ock, (S)cissor,(P)aper",
    youPicked: "You selected",
    aiPicked: "AI selected",
    rock: "R",
    paper: "P",
    scissor: "S",
    choices: ["Rock", "Paper","Scissor"],
    title: "Lets play rock, paper & scissor",
    playAgain: "Lets play again!Y/N"



}

}
export default GAME_DICTIONARY;

function getRandomItemFromArray(array) {
    let max = array.length - 1;
    let rndIndex = Math.round(Math.random() * max);
    return array[rndIndex];
}


export { getRandomItemFromArray }

import { ANSI } from './ansi.mjs';

function print(text, color = ANSI.COLOR.WHITE) {
    console.log(color, text, ANSI.RESET)
}

export { print }

const ESC = '\x1b';
const CSI = ESC + '[';
const CURSOR_UP = CSI + 'A';
const CURSOR_DOWN = CSI + 'B';
const CURSOR_RIGHT = CSI + 'C';
const CURSOR_LEFT = CSI + 'D';
const CLEAR_SCREEN = CSI + '2J';
const CURSOR_HOME = CSI + '1;1H';
const SAVE_CURSOR = ESC + '7';
const RESTORE_CURSOR = ESC + '8';
const moveCursorTo = (row, col) => CSI + row + ';' + col + 'H';
const BELL = '\x07';
const RESET = '\x1b[0m';
const GREEN = '\x1b[32m';
const RED = '\x1b[31m';
const YELLOW = '\x1b[33m';
const BLUE = '\x1b[34m';
const WHITE = '\x1b[37m';

const ANSI = {
    ESC,
    CSI,
    CURSOR_UP,
    CURSOR_DOWN,
    CURSOR_RIGHT,
    CURSOR_LEFT,
    CLEAR_SCREEN,
    CURSOR_HOME,
    SAVE_CURSOR,
    RESTORE_CURSOR,
    BELL,
    RESET,
    moveCursorTo,
    COLOR: {
        GREEN,
        RED,
        YELLOW,
        BLUE,
        WHITE
    }
}

export { ANSI }
